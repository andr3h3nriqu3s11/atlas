generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//
//
//
// User related models
//
//
//

model User {
  id           String    @id @default(uuid())

  name         String    @unique

  password     String

  userType     String

  authorized   Boolean

  tokens       Token[]

  dateCreated  DateTime @default(now())
  dateUpdate   DateTime @updatedAt
}

model Token {
  token        String  @id

  userId       String

  expireDate   DateTime

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  dateCreated  DateTime @default(now())
}


//
//
// Setting related to settings
//
//

model WorldSetting {
  id           String @id @default(uuid())

  name         String @unique

  templates    Template[]

  dateCreated  DateTime @default(now())
  dateUpdate   DateTime @updatedAt
}

//
//
// Character Template related models
//
//

model Template {
  id                String          @id @default(uuid())

  worldSettingId    String

  // ITEM - CHARACTER
  type              String

  name              String          @unique
  description       String?

  worldSetting      WorldSetting    @relation(references: [id], fields: [worldSettingId], onDelete: Cascade)
  templateFields    TemplateField[]
  templateInstances TemplateInstance[]

  dateCreated       DateTime @default(now())
  dateUpdate        DateTime @updatedAt
}

model TemplateField {
  id            String        @id @default(uuid())
  templateId    String

  // Name of the field this is the internal name
  name          String

  // Label this is for the display name
  label         String

  //            STRING | NUMBER |                                                                  DROPBOX | BOOLEAN
  type          String

  //            DROPBOX - will be enconded as value:text|value:text
  value         String

  required      Boolean

  defaultValue  String

  max            Int?
  min            Int?

  template      Template      @relation(references: [id], fields: [templateId], onDelete: Cascade)

  instanceFields TemplateInstanceFields[]

  dateCreated   DateTime @default(now())
  dateUpdate    DateTime @updatedAt
}


// Will be an instance of a template
model TemplateInstance {
  id           String @id @default(uuid())

  templateId   String

  template     Template @relation(references: [id], fields: [templateId], onDelete: Cascade)

  fields       TemplateInstanceFields[]

  dateCreated  DateTime @default(now())
  dateUpdate   DateTime @updatedAt
}

// Will be an instance of a field in a template
model TemplateInstanceFields {
  id         String @id @default(uuid())

  instanceId String

  fieldId    String

  templateField TemplateField @relation(references: [id], fields: [fieldId], onDelete: Cascade)

  instance   TemplateInstance @relation(references: [id], fields: [instanceId], onDelete: Cascade)
}